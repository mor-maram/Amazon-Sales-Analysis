# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JNvZvAK_NgY9nNzefiSe4vCKM9DgWMKv

# ðŸ“Š Amazon Sales Analysis
**Author:** Maram

**Dataset Overview**

Name: Amazon Sales Dataset

Period: 2020â€“2022

Size: 50,000 orders, 15 columns, 25 MB (CSV)

The dataset contains 50,000 Amazon sales over three years across categories like Electronics, Furniture, and Clothing. It includes order details, sales, profits, and regional data showing strong Western U.S. sales. Seasonal spikes occur during holidays, especially December. The data is clean with minimal missing values and well-balanced across key dimensions.

Key Variables:

Order ID: Unique identifier

Order Date: Purchase date for time analysis

Category: Product group for category performance

Sales: Total amount for revenue insights

Profit: Profit per order for profitability

Region: Geographic sales comparison

**Data Quality Assessment**

Completeness: Critical fields (Order ID, Sales, Profit) have no missing values; minor gaps in optional fields (e.g., Customer Name)

Consistency: Monetary values all in USD; dates uniformly formatted (YYYY-MM-DD)

Anomalies: Some negative profits (losses) and outliers with very high sales values

***Load the dataset and libraries***
"""

import numpy as np
import pandas as pd
import kagglehub

# Download latest version
path = kagglehub.dataset_download("karkavelrajaj/amazon-sales-dataset")

print("Path to dataset files:", path)

amazon= pd.read_csv("/kaggle/input/amazon-sales-dataset/amazon.csv")

"""**Data Cleaning**

"""

amazon.columns

amazon.head()

amazon.isnull().sum()

print("BEFOR CLEANING:", amazon.shape)
amazon_clean = amazon.dropna()
print("AFTER CLEANING:", amazon_clean.shape)

# We remove the â‚¹ and the comma and convert the price to a number
amazon_clean.loc[:, 'discounted_price'] = amazon_clean['discounted_price'].replace({'â‚¹':'', ',':''}, regex=True).astype(float)
amazon_clean.loc[:, 'actual_price'] = amazon_clean['actual_price'].replace({'â‚¹':'', ',':''}, regex=True).astype(float)

# Discount rate from % to a number with decimal points for the graph
amazon_clean.loc[:, 'discount_percentage'] = amazon_clean['discount_percentage'].replace({'%':'', ',':''}, regex=True).astype(float)

## Visualizing

"""## ***Visualizing***"""

import altair as alt

# data processing
category_counts = amazon_clean['category'].dropna().apply(
    lambda x: x.split('|')[0]).value_counts().head(10).reset_index()
category_counts.columns = ['category', 'count']

# visualization
chart = alt.Chart(category_counts).mark_bar().encode(
    x=alt.X('count:Q', title='Number of Products'),
    y=alt.Y('category:N', sort='-x', title='Category'),
    color=alt.Color('category', legend=None)
).properties(
    title='Top 10 Categories by Number of Products',
    width=500,
    height=300
)



chart.show()

"""This code generates a bar chart of the top 10 most frequent product categories.
It extracts the main category from the 'category' column, counts the occurrences, and visualizes the results using the Altair library.
"""

from collections import Counter
from itertools import chain

# Split all categories and flatten the list
all_categories = amazon_clean['category'].dropna().apply(lambda x: x.split('|'))
flat_list = list(chain.from_iterable(all_categories))
category_counts = Counter(flat_list)

# Convert to DataFrame
import pandas as pd
category_counts = pd.DataFrame(category_counts.items(), columns=['category', 'count']).sort_values(by='count', ascending=False).head(10)

import matplotlib.pyplot as plt
import seaborn as sns
#price comparison before and after discount
plt.figure(figsize=(10, 6))
sns.boxplot(
    data=amazon_clean[['actual_price', 'discounted_price']],
    palette='cool'  )
plt.title('Price Comparison Before and After Discount', fontsize=16)
plt.ylabel('Price (â‚¹)', fontsize=14)
plt.xticks([0, 1], ['Actual Price', 'Discounted Price'], fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

"""After applying discounts, the overall price distribution shifted significantly lower.
Most products became cheaper, the price spread slightly narrowed, and only a few high-priced outliers remained.
"""

# convert rating count into number
amazon_clean['rating_count'] = pd.to_numeric(amazon_clean['rating_count'], errors='coerce')

top5_products = amazon_clean.groupby('product_name')['rating_count'].sum().nlargest(5).reset_index()


#short the product name
def shorten_name(name, max_words=5):
    words = str(name).split()
    if len(words) > max_words:
        return ' '.join(words[:max_words]) + '...'
    else:
        return name

# drawing chart
c5 = alt.Chart(top5_products).mark_bar(color='orange').encode(
    x=alt.X('product_name:N', sort='-y', title='Product Name'),
    y=alt.Y('rating_count:Q', title='Total Rating Count'),
    tooltip=['product_name', 'rating_count']
).properties(
    title='Top 5 Most Popular Products (Based on Rating Count)',
)

c5

"""Top 5 Popular product
The figure shows that the best-selling products on Amazon were chargers and cables,
as all five of the most-purchased items belonged to this category.
This indicates that chargers and cables were the most popular products on Amazon.

"""

amazon_clean['rating_count'] = pd.to_numeric(amazon_clean['rating_count'], errors='coerce')

top5_products = amazon_clean.groupby('product_name')['rating_count'].sum().nlargest(5).reset_index()
top5_products

## Display product names and ratings as a table only, without analysis.
## This view helps review rating data directly from the original columns.

# convert to Ø±ÙŠØ§Ù„
conversion_rate = 0.045

# cleaning
amazon_clean = amazon_clean.copy()  # Ensure that the data is not a sub-copy
amazon_clean.loc[:, 'actual_price_sar'] = amazon_clean['actual_price'].astype(float) * conversion_rate

# convert to numaric number
amazon_clean.loc[:, 'discount_percentage'] = pd.to_numeric(amazon_clean['discount_percentage'], errors='coerce')

# visualization
g2 = alt.Chart(amazon_clean).mark_circle().encode(
    x=alt.X('actual_price_sar:Q', title='Actual Price (SAR)'),
    y=alt.Y('discount_percentage:Q', title='Discount Percentage (%)'),
    opacity=alt.value(0.6),  # To simulate the 'alpha' effect in Seaborn
).properties(
    title='Actual Price vs Discount Percentage (in SAR)',
    width=800,
    height=500
)

g2.show()

"""The scatter plot shows that most products are priced below 500 SAR and often receive higher discounts.
Expensive products are rare and typically have discounts between 30% and 50%, but no clear pattern links price to discount percentage.
Overall, Amazonâ€™s market is dominated by lower-priced items with larger discounts.
"""

import altair as alt

# Create a column for the actual price after the discount
amazon_clean['discounted_price_sar'] = amazon_clean['discounted_price'] * conversion_rate

# Analysis of the combined effect of discounted price and discount rate on valuations
chart = alt.Chart(amazon_clean).mark_point(filled=True).encode(
    x=alt.X('discounted_price_sar:Q', title='Discounted Price (SAR)'),
    y=alt.Y('rating:Q', title='Product Rating'),
    color='discount_percentage:Q',
    size='rating_count:Q',
    tooltip=['product_name:N', 'discounted_price_sar:Q', 'rating:Q', 'discount_percentage:Q'] # Show details on hover
).properties(
    title='Effect of Discounted Price and Discount Percentage on Product Rating',
    width=800,
    height=500
)

# Add a trend line to show the relationship between the discounted price and the valuations.
trendline = chart + alt.Chart(amazon_clean).mark_line(color='red').encode(
    x='discounted_price_sar:Q',
    y='mean(rating):Q'
)

trendline.show()

"""The visualization shows that product ratings on Amazon remain generally high (4.0â€“5.0) regardless of discounted price or discount percentage.
Lower-priced items (under 500 SAR) are more common and receive more reviews, while higher-priced products have fewer ratings but similar scores.
Thereâ€™s no strong relationship between discount percentage or price and product rating, and the average rating remains stable across price ranges.
"""